name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
      REL: release-${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust host key
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create release dirs on server
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /opt/app/releases/${REL}/{backend,frontend}"

      - name: Upload backend (rsync)
        run: |
          rsync -avz --delete \
            --exclude '.git' --exclude 'node_modules' --exclude 'dist' \
            --exclude '.env*' --exclude '*firebase*.json' --exclude 'cookies.txt' \
            backend/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/app/releases/${REL}/backend/

      - name: Upload frontend (rsync)
        run: |
          rsync -avz --delete \
            --exclude '.git' --exclude 'node_modules' --exclude 'dist' \
            frontend/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/app/releases/${REL}/frontend/

      - name: Write /etc/app/backend.env + Firebase JSON, verify, and ensure systemd unit
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash -se' <<'EOF'
          set -euo pipefail
          sudo mkdir -p /etc/app /opt/app/secrets

          # Fail fast if any required secrets (from GitHub) are empty
          test -n "${{ secrets.JWT_SECRET }}" || { echo "[ERROR] JWT_SECRET missing"; exit 1; }
          test -n "${{ secrets.DATABASE_URL }}" || { echo "[ERROR] DATABASE_URL missing"; exit 1; }
          test -n "${{ secrets.DIRECT_URL }}" || { echo "[ERROR] DIRECT_URL missing"; exit 1; }
          test -n "${{ secrets.OPENAI_API_KEY }}" || { echo "[ERROR] OPENAI_API_KEY missing"; exit 1; }
          test -n "${{ secrets.ADMIN_EMAIL }}" || { echo "[ERROR] ADMIN_EMAIL missing"; exit 1; }

          # Overwrite backend.env on every deploy
          sudo tee /etc/app/backend.env >/dev/null <<ENV
          NODE_ENV=production
          PORT=3000
          CORS_ORIGINS=https://app.agilehostile.com
          PUBLIC_API_BASE=https://api.agilehostile.com
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          GOOGLE_APPLICATION_CREDENTIALS=/opt/app/secrets/firebase-admin.json
          ENV
          sudo chmod 640 /etc/app/backend.env
          sudo test -s /etc/app/backend.env
          sudo grep -q '^DATABASE_URL=' /etc/app/backend.env
          sudo grep -q '^JWT_SECRET=' /etc/app/backend.env

          # Hardcoded Firebase JSON (from your request)
          sudo tee /opt/app/secrets/firebase-admin.json >/dev/null <<'JSON'
          {
            "type": "service_account",
            "project_id": "mmwave-35747",
            "private_key_id": "aa8c19ce4218ae8180c2c382b6053235297f0465",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDdDRv3+NyvLSxu\nWJG5MRmUUxR0Dg3PxH2ijMarKr+fzzDxgGM+EDY9ZKEXz6Bkkeanj1E/eCsLYkKn\nQwSrbBiABA1G2XswI+Qg85bbL0bZZHjOGEvdWKMtFTOMbl2BLIhTbyhn7i22CApn\nHfDZwHOG/WezvysV7TLBV6+8UKE2GwxmOMSV8/6QSX4L03/jok/+k/d4uk9cG+r5\nrQlrLykg1/50EJf7ru56S+1HJoNTiYgbVpapeaHNhZIK4HFCOA9J92+UBiPMW19d\n5/2VTYQp0quZE0+rXl35VEFbYXW0Xt/jfwrUezLSACDuopQowTZYklohqZe0T5ku\nhbJd7fE/AgMBAAECggEAAnzznqPqH/1QgwweKnPMsj2z0jvs7d9r++4SYmTVyVUK\nBlMyoBqLRxT14eW6tscUTeMwFUMjVjp3PkNj2btwFH4h2XVN4f8qwdrcDNWIZPQG\nOWj5REw2HKYgxr418TlGGOJRwHG5iVNSgqdJ9GQqfg97dlYlhFaqJpZNFRU3QKZM\nmXrda1Nt6toX7VG6uc7nUz7PjJZJGXg1WgwFbQ72cu+t+XXCPUQm3fw8vYXbw8Ka\neFd/4dEQsJc5K3Y1peg8FnrOTKDribhZmW43Eptau0HkN+up+1HXwO495bGWcrVu\nA66aJISKSiOvVmw3Uz6QQ0OGRz6nIqUwtnzlC38CqQKBgQD1ger9F0qmKH3emZhh\nPMxhplPlKC0ie/yalH34RGKH9yJTCV3dOSyZ0kzOWhLFx2fQJQg5GBtH3Trn1frY\nP4rWpps9K2G6kqupJqACbSrkMV+h4A+OOi+UY173snZwJGNxwLRAFD0vfe18BDB3\nDx1Bhorsil1jkbbU95Z2vfNgSwKBgQDmf53daGNGQwFgBqbq/MyDwG5MmFSZ0L7m\nHMEfWkH8AcFiX80X36Pygw7y0czYK6R5DRsKoZUCBohKL49DIqUgGO2RWNVmziSN\nsDsyg31umBpgqebA/CzpPryqCzGJkPMyhZmwVZRgj+Nlmfi8scxiUE9PBA+SMfwg\nhfbqDO4iXQKBgQDhAVD85HvmDPZPLTYa6D3owSfivg+fq0K36aAKCaLEOhubPtpo\nBh56W+NIvAS4fykF+uquaQmXs4ppMBPWXWZBlDByv2+yLvpk7KF5l9PXj+i100Ru\ndaVlui0vlsA1xyPc/WA12la5UBB3uN8yPwfxJf3tDGLK/qEyTjf4W97SQQKBgBxq\nGPzlVG+h7PZ4e3U2asPHIhHBKZS4nf/iBZCm4MF/Oea1pqPNxvkrXNlkMZtobeMa\nUX4TAzp3sa9rg36kM7TsPcUQLWZ5/RmWYwXMHddXWtEVwMODksnCGSHhNV8fBkvx\nGkwZkKwCsOaif35LcMWh3tT/zCeaj9k2ioS5yVVlAoGAXkvXT0GXxLEtxwLj2K8+\nG1lPMIoR2hEYu+3YKvyTfR2DYOKBqZ0iCifo33wp31nVOTxhgtqdTCurFXiM5euC\n7sdgdWycZQwfs8dLf1Nztr926cB5Fpvx+s66V6fAIDQVcAx72r7lyjcAerZJBu2I\n/Z3ZZNLpgc3oH5+Nt29z4u0=\n-----END PRIVATE KEY-----\n",
            "client_email": "firebase-adminsdk-fbsvc@mmwave-35747.iam.gserviceaccount.com",
            "client_id": "109253598092964126182",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40mmwave-35747.iam.gserviceaccount.com",
            "universe_domain": "googleapis.com"
          }
          JSON
          sudo chown ubuntu:ubuntu /opt/app/secrets/firebase-admin.json
          sudo chmod 600 /opt/app/secrets/firebase-admin.json

          # Ensure systemd unit exists; create if missing (no heredocs to upset YAML)
          if ! systemctl list-unit-files | grep -q '^app-backend.service'; then
            echo "[INFO] app-backend.service missing; creating"
            sudo bash -c '{
              echo "[Unit]"
              echo "Description=App Backend"
              echo "After=network.target"
              echo
              echo "[Service]"
              echo "EnvironmentFile=/etc/app/backend.env"
              echo "WorkingDirectory=/opt/app/current-backend"
              echo "ExecStart=/usr/bin/node dist/server.js"
              echo "Restart=always"
              echo "User=ubuntu"
              echo "Group=ubuntu"
              echo
              echo "[Install]"
              echo "WantedBy=multi-user.target"
            } > /etc/systemd/system/app-backend.service'
            sudo systemctl daemon-reload
            sudo systemctl enable app-backend
          fi
          EOF

      - name: Build, canary, flip, then frontend
        env:
          VITE_API_BASE: ${{ vars.VITE_API_BASE }}
          VITE_FIREBASE_API_KEY: ${{ vars.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ vars.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ vars.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_APP_ID: ${{ vars.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ vars.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ vars.VITE_FIREBASE_MEASUREMENT_ID }}
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash -se' <<'EOF'
          set -euo pipefail
          REL="${{ env.REL }}"

          echo "==> Preflight env"
          REQUIRED=(JWT_SECRET DATABASE_URL DIRECT_URL CORS_ORIGINS PUBLIC_API_BASE GOOGLE_APPLICATION_CREDENTIALS OPENAI_API_KEY)
          MISS=()
          for k in "${REQUIRED[@]}"; do
            v=$(sudo awk -F= -v k="$k" '$1==k{print $2}' /etc/app/backend.env | tr -d "\r")
            [ -z "$v" ] && MISS+=("$k")
          done
          P=$(sudo awk -F= '$1=="GOOGLE_APPLICATION_CREDENTIALS"{print $2}' /etc/app/backend.env | tr -d "\r")
          if [ -z "$P" ] || ! sudo test -s "$P"; then MISS+=("GOOGLE_APPLICATION_CREDENTIALS(path)") ; fi
          if [ ${#MISS[@]} -gt 0 ]; then echo "[ERROR] Missing: ${MISS[*]}"; exit 1; fi

          echo "==> Backend build"
          cd /opt/app/releases/$REL/backend
          npm ci
          npm run build

          echo "==> Canary on :3001 (check body contains ok:true)"
          (
            set -euo pipefail
            set -a
            . /etc/app/backend.env
            set +a
            PORT=3001 nohup node dist/server.js >/tmp/app-canary.log 2>&1 &
            CANARY_PID=$!
            for i in {1..30}; do
              if curl -fsS http://127.0.0.1:3001/api/health | grep -q '"ok":true'; then
                echo "Canary healthy"
                break
              fi
              sleep 0.5
              [ $i -eq 30 ] && { echo "[ERROR] Canary failed"; tail -n 200 /tmp/app-canary.log || true; kill $CANARY_PID || true; exit 1; }
            done
            kill $CANARY_PID || true
          )

          echo "==> Flip symlink & restart"
          sudo ln -sfn /opt/app/releases/$REL/backend /opt/app/current-backend
          systemctl list-unit-files | grep -q '^app-backend.service' || { echo "[ERROR] app-backend.service missing at flip"; exit 1; }
          sudo systemctl restart app-backend
          sleep 1

          echo "==> Backend health (body must contain ok:true)"
          curl -fsS http://127.0.0.1:3000/api/health | grep -q '"ok":true' || {
            echo "[ERROR] API not healthy"; journalctl -u app-backend -n 120 --no-pager || true; exit 1;
          }

          echo "==> Frontend build & publish"
          cd /opt/app/releases/$REL/frontend
          cat > .env.production <<EOV
          VITE_API_BASE=${{ env.VITE_API_BASE }}
          VITE_FIREBASE_API_KEY=${{ env.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ env.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ env.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_APP_ID=${{ env.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ env.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ env.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_MEASUREMENT_ID=${{ env.VITE_FIREBASE_MEASUREMENT_ID }}
          EOV

          unset NODE_ENV npm_config_production
          npm ci --include=dev
          npm run build
          sudo rsync -av --delete dist/ /var/www/app/

          echo "==> Public checks"
          curl -fsS https://api.agilehostile.com/api/health | grep -q '"ok":true'
          curl -fsS https://app.agilehostile.com >/dev/null
          echo "==> Done."
          EOF
