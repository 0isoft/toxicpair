name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    env:
      REL: release-${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Trust host key
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create release dirs on server
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /opt/app/releases/${REL}/{backend,frontend}"

      - name: Upload backend (rsync)
        run: |
          rsync -avz --delete \
            --exclude '.git' --exclude 'node_modules' --exclude 'dist' \
            --exclude '.env*' --exclude '*firebase*.json' --exclude 'cookies.txt' \
            backend/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/app/releases/${REL}/backend/

      - name: Upload frontend (rsync)
        run: |
          rsync -avz --delete \
            --exclude '.git' --exclude 'node_modules' --exclude 'dist' \
            frontend/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/app/releases/${REL}/frontend/

      - name: Sync secrets to /etc/app and Firebase JSON
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash -se' <<'EOF'
          set -euo pipefail
          sudo mkdir -p /etc/app /opt/app/secrets

          # Overwrite backend.env each deploy
          sudo tee /etc/app/backend.env >/dev/null <<ENV
          NODE_ENV=production
          PORT=3000
          CORS_ORIGINS=https://app.agilehostile.com
          PUBLIC_API_BASE=https://api.agilehostile.com
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          GOOGLE_APPLICATION_CREDENTIALS=/opt/app/secrets/firebase-admin.json
          ENV
          sudo chmod 640 /etc/app/backend.env

          # Write the raw (multi-line) JSON secret
          sudo tee /opt/app/secrets/firebase-admin.json >/dev/null <<JSON
${{ secrets.FIREBASE_ADMIN_JSON }}
JSON
          sudo chmod 600 /opt/app/secrets/firebase-admin.json
          EOF

      - name: Build, canary, flip, then frontend
        env:
          VITE_API_BASE: ${{ vars.VITE_API_BASE }}
          VITE_FIREBASE_API_KEY: ${{ vars.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ vars.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ vars.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_APP_ID: ${{ vars.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ vars.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ vars.VITE_FIREBASE_MEASUREMENT_ID }}
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'bash -se' <<EOF
          set -euo pipefail
          REL="${{ env.REL }}"

          echo "==> Preflight env"
          REQUIRED=(JWT_SECRET DATABASE_URL DIRECT_URL CORS_ORIGINS PUBLIC_API_BASE GOOGLE_APPLICATION_CREDENTIALS OPENAI_API_KEY)
          MISS=()
          for k in "\${REQUIRED[@]}"; do
            v=\$(sudo awk -F= -v k="\$k" '\$1==k{print \$2}' /etc/app/backend.env | tr -d "\r")
            [ -z "\$v" ] && MISS+=("\$k")
          done
          P=\$(sudo awk -F= '\$1=="GOOGLE_APPLICATION_CREDENTIALS"{print \$2}' /etc/app/backend.env | tr -d "\r")
          if [ -z "\$P" ] || ! sudo test -s "\$P"; then MISS+=("GOOGLE_APPLICATION_CREDENTIALS(path)"); fi
          if [ \${#MISS[@]} -gt 0 ]; then echo "[ERROR] Missing: \${MISS[*]}"; exit 1; fi

          echo "==> Backend build"
          cd /opt/app/releases/\$REL/backend
          npm ci
          npm run build

          echo "==> Canary on :3001"
          set -a
          . /etc/app/backend.env
          set +a
          PORT=3001 nohup node dist/server.js >/tmp/app-canary.log 2>&1 &
          CANARY_PID=\$!
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:3001/api/health >/dev/null; then echo "Canary healthy"; break; fi
            sleep 0.5
            [ \$i -eq 30 ] && { echo "[ERROR] Canary failed"; tail -n 200 /tmp/app-canary.log || true; kill \$CANARY_PID || true; exit 1; }
          done
          kill \$CANARY_PID || true

          echo "==> Flip symlink & restart"
          sudo ln -sfn /opt/app/releases/\$REL/backend /opt/app/current-backend
          sudo systemctl restart app-backend
          sleep 1
          curl -fsS http://127.0.0.1:3000/api/health >/dev/null || { echo "[ERROR] API not healthy"; journalctl -u app-backend -n 120 --no-pager || true; exit 1; }

          echo "==> Frontend build & publish"
          cd /opt/app/releases/\$REL/frontend
          cat > .env.production <<EOV
          VITE_API_BASE=${{ env.VITE_API_BASE }}
          VITE_FIREBASE_API_KEY=${{ env.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ env.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ env.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_APP_ID=${{ env.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ env.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ env.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_MEASUREMENT_ID=${{ env.VITE_FIREBASE_MEASUREMENT_ID }}
          EOV
          npm ci
          npm run build
          sudo rsync -av --delete dist/ /var/www/app/

          echo "==> Public checks"
          curl -fsS https://api.agilehostile.com/api/health >/dev/null
          curl -fsS https://app.agilehostile.com >/dev/null
          echo "==> Done."
          EOF
